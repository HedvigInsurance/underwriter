schema {
    mutation: Mutation
    query: Query
}

type Query {
    quote(id: ID): Quote!
    lastQuoteOfMember: Quote!
    quoteBundle(input: QuoteBundleInput!): QuoteBundle!
    signMethodForQuotes(input: [ID!]!): SignMethod!
}

type Mutation {
    createQuote(input: CreateQuoteInput!): CreateQuoteResult!
    editQuote(input: EditQuoteInput!): CreateQuoteResult!
    removeCurrentInsurer(input : RemoveCurrentInsurerInput!): CreateQuoteResult!
    removeStartDate(input : RemoveStartDateInput!): CreateQuoteResult!
    signQuotes(input: SignQuotesInput!): StartSignResponse!
}

input CreateQuoteInput {
    id: ID!
    firstName: String!
    lastName: String!
    currentInsurer: String
    ssn: String
    birthDate: LocalDate
    startDate: LocalDate
    apartment: CreateApartmentInput @deprecated(reason: "Use swedishApartment")
    house: CreateHouseInput @deprecated(reason: "Use swedishHouse")
    swedishApartment: CreateSwedishApartmentInput
    swedishHouse: CreateSwedishHouseInput
    norwegianHomeContents: CreateNorwegianHomeContentsInput
    norwegianTravel: CreateNorwegianTravelInput
    danishHomeContents: CreateDanishHomeContentsInput
    danishAccident: CreateDanishAccidentInput
    danishTravel: CreateDanishTravelInput
    email: String
    dataCollectionId: ID
    phoneNumber: String
}

input CreateNorwegianHomeContentsInput {
    street: String!
    zipCode: String!
    coInsured: Int!
    livingSpace: Int!
    isYouth: Boolean!
    type: NorwegianHomeContentsType!
}

enum NorwegianHomeContentsType {
    RENT
    OWN
}

input CreateNorwegianTravelInput {
    coInsured: Int!
    isYouth: Boolean!
}

input CreateDanishHomeContentsInput {
    street: String!
    zipCode: String!
    bbrId: String
    apartment: String
    floor: String
    city: String
    livingSpace: Int!
    coInsured: Int!
    isStudent: Boolean!
    type: DanishHomeContentsType!
}

input CreateDanishAccidentInput {
    street: String!
    zipCode: String!
    bbrId: String
    apartment: String
    floor: String
    city: String
    coInsured: Int!
    isStudent: Boolean!
}

input CreateDanishTravelInput {
    street: String!
    zipCode: String!
    bbrId: String
    apartment: String
    floor: String
    city: String
    coInsured: Int!
    isStudent: Boolean!
}

enum DanishHomeContentsType {
    RENT
    OWN
}

input CreateApartmentInput {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    type: ApartmentType!
}

input CreateSwedishApartmentInput {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    type: ApartmentType!
}

input CreateHouseInput {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    ancillarySpace: Int!
    yearOfConstruction: Int!
    numberOfBathrooms: Int!
    isSubleted: Boolean!
    extraBuildings: [ExtraBuildingInput!]! # Empty list represents no additional buildings. Hence null is not allowed.
}

input CreateSwedishHouseInput {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    ancillarySpace: Int!
    yearOfConstruction: Int!
    numberOfBathrooms: Int!
    isSubleted: Boolean!
    extraBuildings: [ExtraBuildingInput!]! # Empty list represents no additional buildings. Hence null is not allowed.
}

input EditQuoteInput {
    id: ID!
    firstName: String
    lastName: String
    currentInsurer: String
    ssn: String
    birthDate: LocalDate
    startDate: LocalDate
    apartment: EditApartmentInput @deprecated(reason: "Use swedishApartment")
    swedishApartment: EditSwedishApartmentInput
    house: EditHouseInput @deprecated(reason: "Use swedishHouse")
    swedishHouse: EditSwedishHouseInput
    norwegianHomeContents: EditNorwegianHomeContentsInput
    norwegianTravel: EditNorwegianTravelInput
    danishHomeContents: EditDanishHomeContentsInput
    danishAccident: EditDanishAccidentInput
    danishTravel: EditDanishTravelInput
    email: String
    phoneNumber: String
}

input EditApartmentInput {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    type: ApartmentType
}

input EditSwedishApartmentInput {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    type: ApartmentType
}

input EditHouseInput {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    ancillarySpace: Int
    yearOfConstruction: Int
    numberOfBathrooms: Int
    isSubleted: Boolean
    extraBuildings: [ExtraBuildingInput!]
}

input EditSwedishHouseInput {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    ancillarySpace: Int
    yearOfConstruction: Int
    numberOfBathrooms: Int
    isSubleted: Boolean
    extraBuildings: [ExtraBuildingInput!]
}

input EditNorwegianHomeContentsInput {
    street: String
    zipCode: String
    coInsured: Int
    livingSpace: Int
    isYouth: Boolean
    type: NorwegianHomeContentsType
}

input EditDanishHomeContentsInput {
    street: String
    apartment: String
    floor: String
    zipCode: String
    city: String
    bbrId: String
    coInsured: Int
    livingSpace: Int
    isStudent: Boolean
    type: DanishHomeContentsType
}

input EditDanishAccidentInput {
    street: String
    zipCode: String
    apartment: String
    floor: String
    city: String
    bbrId: String
    coInsured: Int
    isStudent: Boolean
}

input EditDanishTravelInput {
    street: String
    zipCode: String
    apartment: String
    floor: String
    city: String
    bbrId: String
    coInsured: Int
    isStudent: Boolean
}

input EditNorwegianTravelInput {
    coInsured: Int
    isYouth: Boolean
}

input ExtraBuildingInput {
    type: ExtraBuildingType!
    area: Int!
    hasWaterConnected: Boolean!
}

input SignQuotesInput {
    quoteIds: [ID!]!
    successUrl: String
    failUrl: String
}

enum ExtraBuildingType {
    GARAGE
    CARPORT
    SHED
    STOREHOUSE
    FRIGGEBOD
    ATTEFALL
    OUTHOUSE
    GUESTHOUSE
    GAZEBO
    GREENHOUSE
    SAUNA
    BARN
    BOATHOUSE
    OTHER
}

enum ApartmentType {
    STUDENT_RENT
    RENT
    STUDENT_BRF
    BRF
}

input RemoveCurrentInsurerInput {
    id: ID!
}

input RemoveStartDateInput {
    id: ID!
}

union CreateQuoteResult = CompleteQuote | UnderwritingLimitsHit

enum TypeOfContract {
    SE_HOUSE
    SE_APARTMENT_BRF
    SE_APARTMENT_RENT
    SE_APARTMENT_STUDENT_BRF
    SE_APARTMENT_STUDENT_RENT
    NO_HOME_CONTENT_OWN
    NO_HOME_CONTENT_RENT
    NO_HOME_CONTENT_YOUTH_OWN
    NO_HOME_CONTENT_YOUTH_RENT
    NO_TRAVEL
    NO_TRAVEL_YOUTH
    DK_HOME_CONTENT_OWN
    DK_HOME_CONTENT_RENT
    DK_HOME_CONTENT_STUDENT_OWN
    DK_HOME_CONTENT_STUDENT_RENT
    DK_ACCIDENT,
    DK_ACCIDENT_STUDENT,
    DK_TRAVEL,
    DK_TRAVEL_STUDENT
}

type CompleteQuote {
    id: ID!
    currentInsurer: CurrentInsurer
    price: MonetaryAmountV2! @deprecated(reason: "Use insuranceCost")
    insuranceCost: InsuranceCost!
    firstName: String!
    lastName: String!
    ssn: String
    birthDate: LocalDate!
    details: CompleteQuoteDetails! @deprecated(reason: "Use quoteDetails")
    quoteDetails: QuoteDetails!
    startDate: LocalDate
    expiresAt: LocalDate!
    email: String
    dataCollectionId: ID
    typeOfContract: TypeOfContract!
    phoneNumber: String
}

type CurrentInsurer {
    id: String
    displayName: String
    switchable: Boolean
}

# These are duplicated in multiple services, and must match what is currently spelled out in Giraffe
union ExtraBuilding = ExtraBuildingValue

interface ExtraBuildingCore {
    type: ExtraBuildingType!
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingValue implements ExtraBuildingCore {
    type: ExtraBuildingType!
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type UnderwritingLimitsHit {
    limits: [UnderwritingLimit!]!
}

type UnderwritingLimit {
    description: String! @deprecated(reason: "Use code")
    code: String!
}

type MonetaryAmountV2 {
    amount: String!,
    currency: String!
}

union Quote = CompleteQuote | IncompleteQuote

union CompleteQuoteDetails = CompleteApartmentQuoteDetails | CompleteHouseQuoteDetails | UnknownQuoteDetails

type UnknownQuoteDetails {
    unknown: String
}

union QuoteDetails =
    SwedishApartmentQuoteDetails
    | SwedishHouseQuoteDetails
    | NorwegianHomeContentsDetails
    | NorwegianTravelDetails
    | DanishHomeContentsDetails
    | DanishAccidentDetails
    | DanishTravelDetails


type CompleteApartmentQuoteDetails {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    type: ApartmentType!
}

type CompleteHouseQuoteDetails {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    ancillarySpace: Int!
    extraBuildings: [ExtraBuilding!]!
    numberOfBathrooms: Int!
    yearOfConstruction: Int!
    isSubleted: Boolean!
}

type SwedishApartmentQuoteDetails {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    type: ApartmentType!
}

type SwedishHouseQuoteDetails {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    ancillarySpace: Int!
    extraBuildings: [ExtraBuilding!]!
    numberOfBathrooms: Int!
    yearOfConstruction: Int!
    isSubleted: Boolean!
}

type NorwegianHomeContentsDetails {
    street: String!
    zipCode: String!
    coInsured: Int!
    livingSpace: Int!
    isYouth: Boolean!
    type: NorwegianHomeContentsType!
}

type NorwegianTravelDetails {
    coInsured: Int!
    isYouth: Boolean!
}

type DanishHomeContentsDetails {
    street: String!
    zipCode: String!
    apartment: String
    floor: String
    bbrId: String
    city: String
    livingSpace: Int!
    coInsured: Int!
    isStudent: Boolean!
    type: DanishHomeContentsType!
}

type DanishAccidentDetails {
    street: String!
    zipCode: String!
    apartment: String
    floor: String
    bbrId: String
    city: String
    coInsured: Int!
    isStudent: Boolean!
}

type DanishTravelDetails {
    street: String!
    zipCode: String!
    apartment: String
    floor: String
    bbrId: String
    city: String
    coInsured: Int!
    isStudent: Boolean!
}

type IncompleteQuote {
    id: ID!
    currentInsurer: CurrentInsurer
    startDate: LocalDate
    details: IncompleteQuoteDetails
    email: String
    dataCollectionId: ID
}

union IncompleteQuoteDetails = IncompleteApartmentQuoteDetails | IncompleteHouseQuoteDetails

type IncompleteApartmentQuoteDetails {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    type: ApartmentType
}

type IncompleteHouseQuoteDetails {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    ancillarySpace: Int
    extraBuildings: [ExtraBuilding!]
    numberOfBathrooms: Int
    yearOfConstruction: Int
    isSubleted: Boolean
}

type InsuranceCost {
    monthlyGross: MonetaryAmountV2!,
    monthlyDiscount: MonetaryAmountV2!,
    monthlyNet: MonetaryAmountV2!,
    freeUntil: LocalDate
}

union StartSignResponse =
    SwedishBankIdSession
    | NorwegianBankIdSession
    | DanishBankIdSession
    | SimpleSignSession
    | AlreadyCompleted
    | FailedToStartSign

type SwedishBankIdSession {
    autoStartToken: String
}

type NorwegianBankIdSession {
    redirectUrl: String @deprecated(reason: "This type i not in use any more")
}

type DanishBankIdSession {
    redirectUrl: String @deprecated(reason: "This type i not in use any more")
}

type SimpleSignSession {
    id: ID!
}

type AlreadyCompleted {
    ignore: Boolean
}

type FailedToStartSign {
    errorMessage: String!
    errorCode: String!
}

input QuoteBundleInput {
    ids: [ID!]!
}

type QuoteBundle {
    quotes: [BundledQuote!]!
    bundleCost: InsuranceCost!
}

type BundledQuote {
    id: ID!
    currentInsurer: CurrentInsurer
    price: MonetaryAmountV2!
    firstName: String!
    lastName: String!
    ssn: String
    birthDate: LocalDate!
    quoteDetails: QuoteDetails!
    startDate: LocalDate
    expiresAt: LocalDate!
    email: String
    dataCollectionId: ID
    typeOfContract: TypeOfContract!
}

enum SignMethod {
    SWEDISH_BANK_ID
    NORWEGIAN_BANK_ID
    DANISH_BANK_ID
    SIMPLE_SIGN
    SELF_CHANGE_COMMIT
}

scalar LocalDate
