schema {
    mutation: Mutation
    query: Query
}

type Query {
    quote(id: ID): Quote!
}

type Mutation {
    createQuote(input: CreateQuoteInput!): CreateQuoteResult!
#    editQuote(input: EditQuoteInput!): CreateQuoteResult!
#    removeCurrentInsurer(input : RemoveCurrentInsurerInput!): CreateQuoteResult!
}

input CreateQuoteInput {
    id: ID!
    firstName: String!
    lastName: String!
    currentInsurer: String
    ssn: String!
    apartment: CreateApartmentInput
    house: CreateHouseInput
}

input CreateApartmentInput {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    type: ApartmentType!
}

input CreateHouseInput {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    ancillarySpace: Int!
    extraBuildings: [ExtraBuildingInput!]! # Empty list represents no additional buildings. Hence null is not allowed.
}

input EditQuoteInput {
    id: ID!
    firstName: String
    lastName: String
    currentInsurer: String
    ssn: String
    apartment: EditApartmentInput
    house: EditHouseInput
}

input EditApartmentInput {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    type: ApartmentType
}

input EditHouseInput {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    ancillarySpace: Int
    extraBuildings: [ExtraBuildingInput!] # Empty list represents no additional buildings. Hence null is not allowed.
}

input ExtraBuildingInput {
    type: ExtraBuildingType!
    area: Int!
    hasWaterConnected: Boolean!
}

enum ExtraBuildingType {
    GARAGE
    CARPORT
    SHED
    STOREHOUSE
    FRIGGEBOD
    ATTEFALL
    OUTHOUSE
    GUESTHOUSE
    GAZEBO
    GREENHOUSE
    SAUNA
    BARN
    BOATHOUSE
    OTHER
}

enum ApartmentType {
    STUDENT_RENT
    RENT
    STUDENT_BRF
    BRF
}

input RemoveCurrentInsurerInput {
    id: ID!
}

union CreateQuoteResult = CompleteQuote | UnderwritingLimitsHit

type CompleteQuote {
    id: ID!
    currentInsurer: String
    price: MonetaryAmountV2!
    details: CompleteQuoteDetails!
}

union ExtraBuilding =
      ExtraBuildingGarage
    | ExtraBuildingCarport
    | ExtraBuildingShed
    | ExtraBuildingStorehouse
    | ExtraBuildingFriggebod
    | ExtraBuildingAttefall
    | ExtraBuildingOuthouse
    | ExtraBuildingGuesthouse
    | ExtraBuildingGazebo
    | ExtraBuildingGreenhouse
    | ExtraBuildingSauna
    | ExtraBuildingBarn
    | ExtraBuildingBoathouse
    | ExtraBuildingOther

interface ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingGarage implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingCarport implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingShed implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingStorehouse implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingFriggebod implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingAttefall implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingOuthouse implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingGuesthouse implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingGazebo implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingGreenhouse implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingSauna implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingBarn implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingBoathouse implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type ExtraBuildingOther implements ExtraBuildingCore {
    area: Int!
    displayName: String!
    hasWaterConnected: Boolean!
}

type UnderwritingLimitsHit {
    limits: [UnderwritingLimit!]!
}

type UnderwritingLimit {
    description: String!
}

type MonetaryAmountV2 {
    amount: String!,
    currency: String!
}

union Quote = CompleteQuote | IncompleteQuote

union CompleteQuoteDetails = CompleteApartmentQuoteDetails | CompleteHouseQuoteDetails

type CompleteApartmentQuoteDetails {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    type: ApartmentType!
}

type CompleteHouseQuoteDetails {
    street: String!
    zipCode: String!
    householdSize: Int!
    livingSpace: Int!
    ancillarySpace: Int!
    extraBuildings: [ExtraBuilding!]!
}

type IncompleteQuote {
    id: ID!
    currentInsurer: String
    details: IncompleteQuoteDetails
}

union IncompleteQuoteDetails = IncompleteApartmentQuoteDetails | IncompleteHouseQuoteDetails

type IncompleteApartmentQuoteDetails {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    type: ApartmentType
}

type IncompleteHouseQuoteDetails {
    street: String
    zipCode: String
    householdSize: Int
    livingSpace: Int
    ancillarySpace: Int
    extraBuildings: [ExtraBuilding!]
}
